---
# User and its environment creation tasks.
# Target hosts: N/A
# Vars: usern
#

- name: Generate a new encrypted user password
  become: true
  when: inventory_hostname in groups['local']
  block:
  - name: Encrypt user password with openssl
    shell: echo {{ usern }} | openssl passwd -6 -stdin
    register: uspass

  - name: Save the new encrypted password as a variable
    replace:
      path: "{{ role_path }}/vars/main.yml"
      regexp: '^username_SHA512_pass: (.*)$'
      replace: "username_SHA512_pass: {{ uspass.stdout }}"

- name: Reload vars file
  become: true
  when: inventory_hostname != 'localhost'
  include_vars: "{{ role_path }}/vars/main.yml"

- name: Create the group and the user with password
  become: true
  when: inventory_hostname != 'localhost'
  block:
  - name: Create user group
    group:
      name: "{{ usern }}"
      state: present

  - name: Create user with the same password
    user:
      name: "{{ usern }}"
      group: "{{ usern }}"
      password: "{{ username_SHA512_pass }}"
      generate_ssh_key: yes

- name: Deploy SSH keys relationships on every cluster node
  become: true
  become_user: "{{ usern }}"
  when: inventory_hostname != 'localhost'
  block:
  - name: Create .ssh user files and set read permissions to both id_rsa.pub and known_hosts files
    file:
      path: "{{ item }}"
      state: touch
      mode: '0644'
      modification_time: preserve
      access_time: preserve
    with_items:
      - "/home/{{ usern }}/.ssh/id_rsa.pub"
      - "/home/{{ usern }}/.ssh/known_hosts"

  - name: Create the .ssh config file
    copy:
      dest: "/home/{{ usern }}/.ssh/config"
      content: StrictHostKeyChecking no
      owner: "{{ usern }}"
      group: "{{ usern }}"
      mode: '0644'

- name: Collect remote user pub keys and deploy into authorized_keys files
  block:
  - name: Collect the remote user pub keys to a local authorized_keys file
    become: true
    become_user: "{{ usern }}"
    when: inventory_hostname != 'localhost'
    register: pubkey
    slurp:
      src: "/home/{{ usern }}/.ssh/id_rsa.pub"

#  - name: Create local empty authorized_keys file
#    when: inventory_hostname == 'localhost'
#    file:
#      path: "{{ role_path }}/vars/authorized_keys"
#      state: touch
#
  - name: Create common authorized_keys file
    with_items: "{{ pubkey.content | b64decode }}"
    when: inventory_hostname != 'localhost'
    delegate_to: localhost
    lineinfile:
      path: "{{ role_path }}/vars/authorized_keys"
      line: "{{ item }}"
      create: yes

  - name: Remove empty lines from local authorized_keys file
    lineinfile:
      path: "{{ role_path }}/vars/authorized_keys"
      regexp: '^\s*$'
      state: absent

  - name: Deploy authorized_keys file to remote nodes
    become: true
    when: inventory_hostname != 'localhost'
    copy:
      src: "{{ role_path }}/vars/authorized_keys"
      dest: "/home/{{ usern }}/.ssh/authorized_keys"
      owner: "{{ usern }}"
      group: "{{ usern }}"
      mode: '0644'

  - name: Remove local authorized_keys file
    file:
      path: "{{ role_path }}/vars/authorized_keys"
      state: absent

- name: Enable SSH login to remote users
  become: true
  when: inventory_hostname != 'localhost'
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^(AllowUsers(?!.*\b{{ usern }}\b).*)$'
    replace: '\1 {{ usern }}'
    validate: /usr/sbin/sshd -t -f %s

- name: Restart SSH service
  become: true
  when: inventory_hostname != 'localhost'
  service:
    name: sshd
    state: restarted

- name: Deploy the user profile.d shell script
  become: true
  when: inventory_hostname != 'localhost'
  copy:
    dest: /etc/profile.d/{{ usern }}.sh
    owner: root
    group: root
    mode: '0644'
    content: |
      export {{ usern | upper }}_HOME=/home/{{ usern }}
      export PATH={{ '${' }}{{ usern | upper }}_HOME{{ '}' }}/VERSION/bin{{ ':${' }}{{ usern | upper }}_HOME{{ '}' }}/VERSION/sbin{{ ':${' }}{{ usern | upper }}_HOME{{ '}/bin:${' }}PATH{{ '}' }}

- name: Create the /var/log subdir for the deployed service
  become: true
  when: inventory_hostname != 'localhost'
  file:
    path: "/var/log/{{ usern }}"
    state: directory
    owner: "{{ usern }}"
    group: "{{ usern }}"
    mode: '0755'

...
